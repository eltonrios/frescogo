#include "string.ceu"

#include "out.ceu"
//#include "wclock.ceu"
#include "int0.ceu"     // UNO=D2, MEGA=D21
#include "int1.ceu"     // UNO=D2, MEGA=D21
{ EICRA = 0b1010; }     // FALLING for both INT0/INT1

#define DX  184
#define DY   64
#define FX    4
#define FY    6

#define BALL_MARK    0
#define BALL_NONE    1
#define BALL_SERVICE 2

#define BESTS 10

#define HIT_AWAIT 150     // desired await between two hits

native/pre do
    ##include <TVout.h>
    ##include <pollserial.h>
    ##include <fontALL.h>
    TVout TV;
    pollserial pserial;

    s16  HITS[1000];
    int  HIT = 0;

    char NAMES[2][20] = { "Atleta ESQ", "Atleta DIR" };

    u32  TIMEOUT  = 300000;
    int  DISTANCE = 800;

    char STR[32];

    typedef struct {
        u8  bests[2][2][BESTS];
        u32 ps[2];
        u32 time;
        u16 hits;
        u8  falls;
    } Game;
    Game GAME;

    int Bests (u8* bests, int* min_, int* max_) {
        *min_ = bests[BESTS-1];
        *max_ = bests[0];
        for (int i=0; i<BESTS; i++) {
            if (bests[i] == 0) {
                return i;
            }
        }
        return BESTS;
    }

    void Bests_Apply (void) {
        for (int i=0; i<2; i++) {
            for (int j=0; j<2; j++) {
                for (int k=0; k<BESTS; k++) {
                    u32 v = GAME.bests[i][j][k];
                    GAME.ps[i] += v*v*4;
                }
            }
        }
    }

    u32 Get_Total (int falls) {
        Bests_Apply();
        u32 avg   = (GAME.ps[0] + GAME.ps[1]) / 2;
        u32 total = min(avg, min(GAME.ps[0],GAME.ps[1])*1.1);
        int pct   = 100 - min(100, (falls)*3);
        return total * pct/100;
    }

    void ALL (void) {
        GAME.ps[0] = 0;
        GAME.ps[1] = 0;
        GAME.time  = 0;
        GAME.hits  = 0;
        GAME.falls = 0;

        memset(GAME.bests, 0, 2*2*BESTS*sizeof(u8));

        for (int i=0 ; i<HIT ; i++) {
            s16 v = HITS[i];
            v = (v >= 0 ? v : -v);

            if (v != BALL_NONE) {
                GAME.hits++;
            }

            if (v == BALL_SERVICE) {
                GAME.falls++;
            }

            if (v!=BALL_NONE && v!=BALL_SERVICE) {
                s16 nxt = HITS[i+1];
                if (i==HIT-1 || nxt==BALL_NONE || nxt==BALL_SERVICE) {
                    // ignore last hit
                }
                else
                {
                    // ps
                    u32 kmh = ((u32) 36) * DISTANCE / v;
                              // prevents overflow
                    GAME.ps[1-(i%2)] += kmh * kmh;

                    // bests
                    u8* vec = GAME.bests[ 1-(i%2) ][ HITS[i]>0 ];
                    for (int j=0; j<BESTS; j++) {
                        if (kmh > vec[j]) {
                            for (int k=BESTS-1; k>j; k--) {
                                vec[k] = vec[k-1];
                            }
                            vec[j] = kmh;
                            break;
                        }
                    }
                }

                GAME.time += v;
            }
        }
    }

    void Screen (const char* str, int kmh, int falls) {
        TV.clear_screen();
        //TV.draw_rect(0,0,DX-1,DY-1,WHITE,-1);

        // KMH
        if (str == NULL) {
            sprintf(STR, "%d", kmh);
            str = STR;
        }
        TV.select_font(font8x8);
        #define K 8
        TV.print(DX/2-K*strlen(str)/2, DY/2-K/2, str);
        TV.select_font(font4x6);

        // TIME/FALLS/PACE
        sprintf(STR, "Tempo:  %3ds", (GAME.time > TIMEOUT) ? 0 : (TIMEOUT-GAME.time)/1000);
        TV.print(DX-FX*strlen(STR)-1,    0, STR);
        sprintf(STR, "Quedas:  %3d", GAME.falls+falls);
        TV.print(DX-FX*strlen(STR)-1,   FY, STR);
        if (GAME.time > 5000) {
            u32 avg   = (GAME.ps[0] + GAME.ps[1]) / 2;
            u32 pace  = avg * 10 / GAME.time;
            sprintf(STR, "Ritmo:   %3d", pace);
        } else {
            sprintf(STR, "Ritmo:  ---");
        }
        TV.print(DX-FX*strlen(STR)-1, 2*FY, STR);

        // BEFORE GET_TOTAL: pace

        // TOTAL
        TV.print(0, DY-2*FY, "TOTAL");
        sprintf(STR, "%5d", Get_Total(GAME.falls+falls) / 100);
        TV.print(0, DY-1*FY, STR);

        // AFTER GET_TOTAL: p0/p1

        // ESQ
        TV.print(0, 0, NAMES[0]);
        {
            int n, min_, max_;
            n = Bests(GAME.bests[0][1], &min_, &max_);
            sprintf(STR, "F: %2d (%3d/%3d)", n, min_, max_);
            TV.print(0, 1*FY, STR);
        }
        {
            int n, min_, max_;
            n = Bests(GAME.bests[0][0], &min_, &max_);
            sprintf(STR, "B: %2d (%3d/%3d)", n, min_, max_);
            TV.print(0, 2*FY, STR);
        }
        TV.print(0, 3*FY, GAME.ps[0]/100);

        // DIR
        TV.print(DX-FX*strlen(NAMES[1])-1, DY-1*FY, NAMES[1]);
        {
            int n, min_, max_;
            n = Bests(GAME.bests[1][1], &min_, &max_);
            sprintf(STR, "F: %2d (%3d/%3d)", n, min_, max_);
            TV.print(DX-FX*strlen(STR)-1, DY-2*FY, STR);
        }
        {
            int n, min_, max_;
            n = Bests(GAME.bests[1][0], &min_, &max_);
            sprintf(STR, "B: %2d (%3d/%3d)", n, min_, max_);
            TV.print(DX-FX*strlen(STR)-1, DY-3*FY, STR);
        }
        sprintf(STR, "%ld", GAME.ps[1]/100);
        TV.print(DX-FX*strlen(STR)-1, DY-4*FY, STR);
    }

    void Hit (char* name, u32 kmh, bool is_back) {
        pserial.print(F("> "));
        pserial.print(name);
        pserial.print(F(": "));
        pserial.print(kmh);
        if (is_back) {
            pserial.print(F(" !"));
        }
        pserial.println();
    }

    void Sound (u32 kmh) {
        if (kmh < 40) {
            TV.tone( 500, 30);
        } else if (kmh < 50) {
            TV.tone(1500, 30);
        } else if (kmh < 60) {
            TV.tone(2500, 30);
        } else if (kmh < 70) {
            TV.tone(3500, 30);
        } else {
            TV.tone(4500, 30);
        }
    }
end

native _TIMEOUT, _DISTANCE, _HITS, _HIT, _GAME, _Screen, _ALL, _Sound;
native/plain  _TV, _pserial, _NAMES, _STR;
native/nohold _Hit;
native/pure   _Get_Total;

output high/low OUT_13;

input none RESTART;

{
    TV.begin(PAL,DX,DY);
    TV.select_font(font4x6);
    TV.set_hbi_hook(pserial.begin(9600));
}

code/call Dump (none) -> none do
    {{
        u32 avg   = (GAME.ps[0] + GAME.ps[1]) / 2;
        u32 pace  = avg * 10 / GAME.time;

        // BEFORE GET_TOTAL: pace

        u32 total = Get_Total(GAME.falls) / 100;

        // AFTER GET_TOTAL: p0/p1

        pserial.println();
        pserial.println(F("--------------------------------"));
        sprintf_P(STR, PSTR("%15s"), NAMES[0]);
        pserial.print(STR);
        pserial.print(F(" / "));
        sprintf_P(STR, PSTR("%s"), NAMES[1]);
        pserial.print(STR);
        pserial.println();

        pserial.print(F("         ("));
        pserial.print(DISTANCE);
        pserial.print(F("cm - "));
        pserial.print(TIMEOUT/1000);
        pserial.println(F("s)"));

        pserial.println(F("--------------------------------"));
        pserial.println();

        sprintf_P(STR, PSTR("%15S: "), F("TOTAL"));
        pserial.print(STR);
        pserial.print(total);
        if (GAME.time > 5000) {
            pserial.print(F(" ("));
            pserial.print(pace);
            pserial.print(F(")"));
        }
        pserial.println();

        sprintf_P(STR, PSTR("%15S: "), F("Tempo"));
        pserial.print(STR);
        pserial.print(GAME.time);
        pserial.println(F("ms"));

        sprintf_P(STR, PSTR("%15S: "), F("Quedas"));
        pserial.print(STR);
        pserial.println(GAME.falls);

        sprintf_P(STR, PSTR("%15S: "), F("Golpes"));
        pserial.print(STR);
        pserial.println(GAME.hits);

        for (int i=0; i<2; i++) {
            sprintf_P(STR, PSTR("%15s: "), NAMES[i]);
            pserial.print(STR);
            pserial.println(GAME.ps[i]/100);
            for (int j=0; j<2; j++) {
                pserial.print(F(" [ "));
                for (int k=0; k<BESTS; k++) {
                    pserial.print(GAME.bests[i][j][k]);
                    pserial.print(" ");
                }
                pserial.println(F("]"));
            }
            pserial.println();
        }
    }}

    var int i = -1;
    var int bola = 0;
    loop do
        i = i + 1;
        if i == _HIT then
            break;
        end
        var s16 v = _HITS[i];

        if v == BALL_SERVICE then
            bola = bola + 1;
            _pserial.print(_F("-- Sequencia "));
            {{
                sprintf_P(STR, PSTR("%2d"), @bola);
                pserial.print(STR);
            }}
            _pserial.println(_F(" ----------------"));
        end

        if v == BALL_NONE then
            continue;
        end

        if i % 2 == 0 then
            _pserial.print(_F("         "));
            if v < 0 then
                _pserial.print(_F("! "));
            else
                _pserial.print(_F("  "));
            end
        else
            _pserial.print(_F("                 "));
        end

        if v == BALL_SERVICE then
            _pserial.println(_F("****"));
        else
            {{
                sprintf_P(STR, PSTR("%4d"), (@v)<0 ? -@v : @v);
                pserial.print(STR);
            }}
            if i%2==1 and v<0 then
                _pserial.print(_F(" !"));
            end
            _pserial.println();
        end
    end
    _pserial.println();
end

code/await Serial (none) -> NEVER do
    loop do
        loop do
            await 1s;
            if _pserial.available() as bool then
                await 1s;
                break;
            end
            //await async do end;
        end

        {{
            int i = 0;
            while (pserial.available()) {
                STR[i++] = pserial.read();
            }
            while (STR[i-1]=='\n' || STR[i-1]=='\r') {
                i--;
            }
            STR[i++] = '\0';
        }}

        var bool ok = do
            if {strncmp_P(STR, PSTR("reinicio"), 8) == 0} as bool then
                await async do
                    emit RESTART;
                end
            else/if {strncmp_P(STR, PSTR("placar"), 6) == 0} as bool then
                call Dump();
            else/if {strncmp_P(STR, PSTR("tempo "), 6) == 0} as bool then
                {{
                    String str = &STR[6];
                    TIMEOUT = str.toInt() * 1000;
                }}
            else/if {strncmp_P(STR, PSTR("dist "), 5) == 0} as bool then
                {{
                    String str = &STR[5];
                    DISTANCE = str.toInt();
                }}
            else/if {strncmp_P(STR, PSTR("esq"), 3) == 0} as bool then
                if {strlen(&STR[3]) < 15} as bool then
                    {strcpy(NAMES[0], &STR[3]);}
                else
                    escape false;
                end
            else/if {strncmp_P(STR, PSTR("dir"), 3) == 0} as bool then
                if {strlen(&STR[3]) < 15} as bool then
                    {strcpy(NAMES[1], &STR[3]);}
                else
                    escape false;
                end
            else/if {strncmp_P(STR, PSTR("-seq"), 4) == 0} as bool then
                if _HIT == 0 then
                    escape false;
                end
                loop do
                    _HIT = _HIT - 1;
                    if _HIT == 0 then
                        break;
                    else/if _HITS[_HIT] == BALL_SERVICE then
                        if _HITS[_HIT-1] == BALL_NONE then
                            _HIT = _HIT - 1;
                        end
                        break;
                    end
                end
            else/if {strncmp_P(STR, PSTR("+seq"), 4) == 0} as bool then
                if _HITS[_HIT] == BALL_MARK then
                    escape false;
                end
                loop do
                    _HIT = _HIT + 1;
                    if _HITS[_HIT]==BALL_MARK or _HITS[_HIT]==BALL_SERVICE then
                        break;
                    end
                end
            else/if {strncmp_P(STR, PSTR("-1"), 2) == 0} as bool then
                if _HIT > 0 then
                    _HIT = _HIT - 1;
                    if _HITS[_HIT] == BALL_NONE then
                        _HIT = _HIT - 1;
                    end
                else
                    escape false;
                end
            else/if {strncmp_P(STR, PSTR("+1"), 2) == 0} as bool then
                if _HITS[_HIT] != BALL_MARK then
                    _HIT = _HIT + 1;
                    if _HITS[_HIT] == BALL_SERVICE then
                        _HIT = _HIT + 1;    // skip BALL_NONE
                    end
                else
                    escape false;
                end
            else
                escape false;
            end
            escape true;
        end;

        if ok then
            _pserial.println(_F("ok"));
        else
            _pserial.println(_F("err"));
        end
        _ALL();
        _Screen("---", 0, 0);
    end
end

loop do
    watching RESTART do
        _pserial.println(_F("= INICIO ="));
        _HIT = 0;
        _ALL();
        _Screen("INICIO", 0, 0);

        do
            loop do
                await 2s;
                _TV.tone(3000, 500);
                await 1s;

                _Screen("GO!", 0, 0);

    // SERVICE
                var int nxt = do
                    spawn Serial();
                    par do
                        await INT0;
                        escape 1;
                    with
                        await INT1;
                        escape 0;
                    end
                end;

                var u32 t0 = _TV.millis();

                if nxt == (_HIT%2) then
                    _HITS[_HIT] = BALL_NONE;
                    _HIT = _HIT + 1;
                end
                _HITS[_HIT] = BALL_SERVICE;
                _HIT = _HIT + 1;

                _TV.tone(500, 30);

                var bool was_back = false;

                _pserial.println(_F("> saque"));
                _Screen("---", 0, 0);
                await HIT_AWAIT ms;

                loop do
                    var int awaited = 0;

                    // both are unpresseed?
                    var bool both = (call INT0_Get() == high) and
                                    (call INT1_Get() == high);

    // HIT
                    // debounce
                    var u32 t1 = _;
                    var int dt = _;
                    var int got;
                    loop do
                        got = do
                            par do
                                await INT0;
                                escape 0;
                            with
                                await INT1;
                                escape 1;
                            end
                        end;

                        t1 = _TV.millis();
                        dt = (t1 - t0) as int;
                        if got!=nxt and dt<400 then
                            continue;
                        end

                        await 50ms;
                        if (got == 0) and (call INT0_Get() == low) then
                            break;
                        else/if (got == 1) and (call INT1_Get() == low) then
                            break;
                        end
                    end
                    awaited = awaited + 50;

                    t0 = t1;

    // FALL
                    // if both were unpressed and now both are pressed,
                    // and its long since the previous hit, then this is a fall
                    if dt > 1000 then
                        await 100ms;
                        awaited = awaited + 100;
                        if both and (call INT0_Get() == low) and
                                    (call INT1_Get() == low)
                        then
                            break;
                        end
                    end

                    if nxt != got then
                        dt = dt / 2;
                    end

                    var u32 kmh = (36 as u32) * _DISTANCE / dt;
                                    // prevents overflow
                    _Sound(kmh);

                    _Hit(_NAMES[1-got], kmh, was_back);
                    if nxt != got then
                        _Hit(_NAMES[got], kmh, false);
                    end

                    if was_back then
                        _HITS[_HIT] = -dt;
                    else
                        _HITS[_HIT] = dt;
                    end
                    _HIT = _HIT + 1;
                    if nxt != got then
                        _HITS[_HIT] = dt;
                        _HIT = _HIT + 1;
                    end
                    nxt = 1 - got;

                    _ALL();
                    _Screen(null, kmh, -1);
                    if _GAME.time >= _TIMEOUT then
                        escape;
                    end

                    if HIT_AWAIT > awaited then
                        await (HIT_AWAIT-awaited)ms;
                    else
                        _ceu_arduino_assert(awaited == HIT_AWAIT, 2);
                    end

                    do
                        var bool is_back;
                        if got == 0 then
                            is_back = (call INT0_Get() == low);
                        else
                            is_back = (call INT1_Get() == low);
                        end
                        if is_back then
                            _TV.tone(200, 30);
                        end
                        was_back = is_back;
                    end
                end

                _TV.tone(300, 100);
                await 150ms;
                _TV.tone(200, 100);
                await 150ms;
                _TV.tone(100, 200);
                await 200ms;

                _ALL();
                _Screen("QUEDA", 0, 0);
                _pserial.println(_F("QUEDA"));
                //call Dump();
            end
        end

        _TV.tone(200, 2000);
        await 2s;

        _ALL();
        _Screen("FIM", 0, 0);
        //call Dump();
        _pserial.println(_F("= FIM ="));

        loop do
            par/or do
                par/or do
                    await INT0;
                with
                    await INT1;
                end
                await 500ms;
            with
                par/and do
                    await INT0;
                with
                    await INT1;
                end
                break;
            end
        end
    end
end
