#include "string.ceu"
#include "out.ceu"
//#include "wclock.ceu"
#include "int0.ceu"     // UNO=D2, MEGA=D21
#include "int1.ceu"     // UNO=D2, MEGA=D21

native/pre do
    ##include <TVout.h>
    ##include <pollserial.h>
    ##include <fontALL.h>
    TVout TV;
    pollserial pserial;
end
native/plain _TV, _pserial;

output high/low OUT_13;

input none RESTART;

#define DISTANCE    8
#define TIMEOUT     300000 //10000

{
    TV.begin(PAL,24,16);
    TV.select_font(font6x8);
    TV.set_hbi_hook(pserial.begin(9600));
}

var[600] u8 hits;
var[20] byte name0 = [] .. "Atleta 1";
var[20] byte name1 = [] .. "Atleta 2";

var u32 time = _;
var int seqs = _;
var u32 p0   = _;
var u32 p1   = _;

code/call Out (none) -> none do
    var u32 total = _min( _min(outer.p0,outer.p1)*1.2, _max(outer.p0,outer.p1) );
    var int pct   = 100 - _min(100, (outer.seqs-1)*3);
    total = total * pct/100;
    _pserial.print(">>> ");
    _pserial.print(outer.time);
    _pserial.print(" ");
    _pserial.print(outer.seqs);
    _pserial.print(" ");
    _pserial.print($outer.hits);
    _pserial.print(" ");
    _pserial.print(outer.p0);
    _pserial.print(" ");
    _pserial.print(outer.p1);
    _pserial.print(" => ");
    _pserial.print(total);
    _pserial.println();
end

code/call Dump (none) -> none do
    {{
        char str[20];
        sprintf(str, "%15s",@(&&outer.name0[0]));
        pserial.print(str);
        pserial.print(" / ");
        sprintf(str, "%s",@(&&outer.name1[0]));
        pserial.print(str);
        pserial.println();
    }}

    var int i = -1;
    loop do
        i = i + 1;
        if i == $outer.hits then
            break;
        end
        if outer.hits[i] == 0 then
            _pserial.println("--------------------------------");
            if outer.hits[i+1] == 0 then
                i = i + 1;
            end
        end

        if i % 2 == 0 then
            _pserial.print("           ");
        else
            _pserial.print("                 ");
        end

        var int v = _map(outer.hits[i], 0,255, 0,2000);
        {{
            char str[5];
            sprintf(str, "%4d", @v);
            pserial.println(str);
        }}
    end
end

spawn do
    loop do
        loop do
            await 1s;
            if _pserial.available() as bool then
                await 1s;
                break;
            end
            await async do end;
        end

        var[32] byte str;
        loop do
            if _pserial.available() as bool then
                str = str .. [_pserial.read()];
            else
                break;
            end
        end
        str = str .. [{'\0'}];

        if _strncmp(&&str[0], "restart", 7) == 0 then
            await async do
                emit RESTART;
            end
        else/if _strncmp(&&str[0], "out", 3) == 0 then
            call Out();
        else/if _strncmp(&&str[0], "dump", 4) == 0 then
            call Dump();
        else/if _strncmp(&&str[0], "name1", 5) == 0 then
            name0 = [] .. (&&str[6] as _char&&);
        else/if _strncmp(&&str[0], "name2", 5) == 0 then
            name1 = [] .. (&&str[6] as _char&&);
        end
    end
end

loop do
    watching RESTART do
        _pserial.println("= START =");
        hits = [];
        time = 0;
        seqs = 0;
        p0   = 0;
        p1   = 0;

        code/call Hit (var int kmh) -> none do
            _TV.println(kmh);

            _pserial.print("> ");
            _pserial.print(kmh);
            _pserial.print(" ");
            _pserial.print(outer.p0);
            _pserial.print(" ");
            _pserial.print(outer.p1);
            _pserial.println();
        end

        do
            loop do
                seqs = seqs + 1;
                call Out();

                await 2s;
                _TV.tone(5000, 500);
                await 1s;

                var int nxt = do
                    par do
                        await INT0;
                        escape 1;
                    with
                        await INT1;
                        escape 0;
                    end
                end;

                var u32 t0 = _millis();
                hits = hits .. [0];

                if nxt != ($hits%2) then
                    hits = hits .. [0];
                end

                _TV.tone(500, 30);
                await 80ms;

                call Hit(0);

                loop do
                    par/or do
                        await 3s;
                        await 2s;
                        break;
                    with
                        if nxt == 0 then
                            await INT0;
                        else
                            await INT1;
                        end
                        nxt = 1 - nxt;

                        var u32 t1 = _millis();
                        var int dt = (t1 - t0) as int;
                        t0 = t1;

                        hits = hits .. [ _map(dt, 100,2000, 0,255) ];

                        var int kmh = 3600 * DISTANCE / dt;
                        if nxt == 0 then
                            p0 = p0 + (kmh*kmh);    // p0 scores when p1 hits
                        else
                            p1 = p1 + (kmh*kmh);
                        end

                        if kmh < 50 then
                            _TV.tone(500, 30);
                            await 80ms;
                        else/if kmh < 60 then
                            _TV.tone(500, 30);
                            await 80ms;
                            _TV.tone(500, 30);
                        else/if kmh < 70 then
                            _TV.tone(2000, 30);
                            await 80ms;
                        else/if kmh < 80 then
                            _TV.tone(2000, 30);
                            await 80ms;
                            _TV.tone(2000, 30);
                        else/if kmh < 90 then
                            _TV.tone(4000, 30);
                            await 80ms;
                        else
                            _TV.tone(4000, 30);
                            await 80ms;
                            _TV.tone(4000, 30);
                        end

                        call Hit(kmh);

                        time = time + dt;
                        if time >= TIMEOUT then
                            escape;
                        end
                    end
                end

                _TV.tone(300, 100);
                await 150ms;
                _TV.tone(200, 100);
                await 150ms;
                _TV.tone(100, 200);
                await 200ms;
            end
        end

        _TV.tone(200, 2000);
        await 2s;

        call Out();
        call Dump();
    end
end
