#include "string.ceu"
#include "out.ceu"
//#include "wclock.ceu"
#include "int0.ceu"     // UNO=D2, MEGA=D21
#include "int1.ceu"     // UNO=D2, MEGA=D21

#define BALL_MARK    0
#define BALL_NONE    1
#define BALL_SERVICE 2

native/pre do
    ##include <TVout.h>
    ##include <pollserial.h>
    ##include <fontALL.h>
    TVout TV;
    pollserial pserial;

    s16  HITS[601];     // +1: last BALL_MARK
    int  HIT = 0;

    char NAMES[2][20] = { "Atleta ESQ", "Atleta DIR" };

    u32  TIMEOUT  = 150000;
    int  DISTANCE = 800;

    char STR[32];

    u32 Get_Total (u32 p0, u32 p1, int falls) {
        u32 total = min( min(p0,p1)*1.2, max(p0,p1) );
        int pct   = 100 - min(100, (falls)*3);
        return total * pct/100;
    }

    typedef struct {
        u16 hits;
        u8  falls;
        u32 time;
        u32 ps[2];
    } Game;
    Game GAME;

    void ALL (void) {
        GAME.hits  = 0;
        GAME.falls = 0;
        GAME.time  = 0;
        GAME.ps[0] = 0;
        GAME.ps[1] = 0;

        for (int i=0 ; i<HIT ; i++) {
            s16 v = HITS[i];
            v = (v >= 0 ? v : -v);

            if (v != BALL_NONE) {
                GAME.hits++;
            }

            if (v == BALL_SERVICE) {
                GAME.falls++;
            }

            if (v!=BALL_NONE && v!=BALL_SERVICE) {
                s16 nxt = HITS[i+1];
                if (i==HIT-1 || nxt==BALL_NONE || nxt==BALL_SERVICE) {
                    // ignore last hit
                } else {
                    u32 kmh = ((u32) 36) * DISTANCE / v;
                              // prevents overflow
                    GAME.ps[1-(i%2)] += kmh * kmh;
                }

                GAME.time += v;
            }
        }
    }
end
native _TIMEOUT, _DISTANCE, _HITS, _HIT, _GAME;
native/plain  _TV, _pserial, _NAMES, _STR;
native/nohold _Hit;
native/pure   _Get_Total;

output high/low OUT_13;

input none RESTART;

{
    TV.begin(PAL,144,80);
    //TV.select_font(font6x8);
    TV.set_hbi_hook(pserial.begin(9600));
}
#if 0
{
  TV.clear_screen();
  //TV.println(0,0,"Multiple fonts:");
  //TV.select_font(font4x6);
  TV.println(0,0, "Abcdefghijklmnopqrstuvxz12345678901234567890aBcdefghijklmnopqrstuvxz12345678901234567890abCdefghijklmnopqrstuvxz12345678901234567890abcDefghijklmnopqrstuvxz12345678901234567890ABCDEFGHIJKL");
  //TV.select_font(font6x8);
  //TV.println("6x8 font FONT");
  //TV.select_font(font8x8);
  //TV.println("8x8 font FONT");
  //TV.select_font(font6x8);
}
do await FOREVER; end
#endif

code/call Score (none) -> none do
    {{
        ALL();
        u32 total = Get_Total(GAME.ps[0], GAME.ps[1], GAME.falls) / 100;
        u32 avg   = (GAME.ps[0] + GAME.ps[1]) / 2;
        u32 pace  = Get_Total(avg, avg, GAME.falls) * 10 / GAME.time;

        pserial.println();
        pserial.println(F("--------------------------------"));
        sprintf_P(STR, PSTR("%15s"), NAMES[0]);
        pserial.print(STR);
        pserial.print(F(" / "));
        sprintf_P(STR, PSTR("%s"), NAMES[1]);
        pserial.print(STR);
        pserial.println();

        pserial.print(F("         ("));
        pserial.print(DISTANCE);
        pserial.print(F("cm - "));
        pserial.print(TIMEOUT/1000);
        pserial.println(F("s)"));

        pserial.println(F("--------------------------------"));
        pserial.println();

        sprintf_P(STR, PSTR("%15S: "), F("TOTAL"));
        pserial.print(STR);
        pserial.print(total);
        if (GAME.time > 5000) {
            pserial.print(F(" ("));
            pserial.print(pace);
            pserial.print(F(")"));
        }
        pserial.println();

        sprintf_P(STR, PSTR("%15S: "), F("Tempo"));
        pserial.print(STR);
        pserial.print(GAME.time);
        pserial.println(F("ms"));

        sprintf_P(STR, PSTR("%15S: "), F("Quedas"));
        pserial.print(STR);
        pserial.println(GAME.falls);

        sprintf_P(STR, PSTR("%15S: "), F("Golpes"));
        pserial.print(STR);
        pserial.println(GAME.hits);

        sprintf_P(STR, PSTR("%15s: "), NAMES[0]);
        pserial.print(STR);
        pserial.println(GAME.ps[0]/100);

        sprintf_P(STR, PSTR("%15s: "), NAMES[1]);
        pserial.print(STR);
        pserial.println(GAME.ps[1]/100);
        pserial.println();
    }}

    var int i = -1;
    var int bola = 0;
    loop do
        i = i + 1;
        if i == _HIT then
            break;
        end
        var s16 v = _HITS[i];

        if v == BALL_SERVICE then
            bola = bola + 1;
            _pserial.print(_F("-- Sequencia "));
            {{
                sprintf_P(STR, PSTR("%2d"), @bola);
                pserial.print(STR);
            }}
            _pserial.println(_F(" ----------------"));
        end

        if v == BALL_NONE then
            continue;
        end

        if i % 2 == 0 then
            _pserial.print(_F("         "));
            if v < 0 then
                _pserial.print(_F("! "));
            else
                _pserial.print(_F("  "));
            end
        else
            _pserial.print(_F("                 "));
        end

        if v == BALL_SERVICE then
            _pserial.println(_F("****"));
        else
            {{
                sprintf_P(STR, PSTR("%4d"), (@v)<0 ? -@v : @v);
                pserial.print(STR);
            }}
            if i%2==1 and v<0 then
                _pserial.print(_F(" !"));
            end
            _pserial.println();
        end
    end
    _pserial.println();
end

native/pre do
    void Hit (char* name, u32 kmh, bool is_back) {
#if 0
{
  TV.clear_screen();
  TV.println(0,0,"Multiple fonts:");
  TV.select_font(font4x6);
  TV.println("4x6 font FONT ate onde eu vou");
  TV.select_font(font6x8);
  TV.println("6x8 font FONT");
  TV.select_font(font8x8);
  TV.println("8x8 font FONT");
  TV.select_font(font6x8);
}
             _TV.print("Atleta 1");
            _TV.print("  ");
            _TV.print("Atleta 2\n");
            _TV.println();
            _TV.println(kmh);
#endif

        pserial.print(F("> "));
        pserial.print(name);
        pserial.print(F(": "));
        pserial.print(kmh);
        if (is_back) {
            pserial.print(F(" !"));
        }
        pserial.println();
    }
end

code/await Serial (none) -> NEVER do
    loop do
        loop do
            await 1s;
            if _pserial.available() as bool then
                await 1s;
                break;
            end
            //await async do end;
        end

        {{
            int i = 0;
            while (pserial.available()) {
                STR[i++] = pserial.read();
            }
            while (STR[i-1]=='\n' || STR[i-1]=='\r') {
                i--;
            }
            STR[i++] = '\0';
        }}

        var bool ok = do
            if {strncmp_P(STR, PSTR("reinicio"), 8) == 0} as bool then
                await async do
                    emit RESTART;
                end
            else/if {strncmp_P(STR, PSTR("placar"), 6) == 0} as bool then
                call Score();
            else/if {strncmp_P(STR, PSTR("tempo "), 6) == 0} as bool then
                {{
                    String str = &STR[6];
                    TIMEOUT = str.toInt() * 1000;
                }}
            else/if {strncmp_P(STR, PSTR("distancia "), 10) == 0} as bool then
                {{
                    String str = &STR[10];
                    DISTANCE = str.toInt();
                }}
            else/if {strncmp_P(STR, PSTR("esquerda "), 9) == 0} as bool then
                if {strlen(&STR[9]) < 15} as bool then
                    {strcpy(NAMES[0], &STR[9]);}
                else
                    escape false;
                end
            else/if {strncmp_P(STR, PSTR("direita "), 8) == 0} as bool then
                if {strlen(&STR[8]) < 15} as bool then
                    {strcpy(NAMES[1], &STR[8]);}
                else
                    escape false;
                end
            else/if {strncmp_P(STR, PSTR("-sequencia"), 10) == 0} as bool then
                if _HIT == 0 then
                    escape false;
                end
                loop do
                    _HIT = _HIT - 1;
                    if _HIT == 0 then
                        break;
                    else/if _HITS[_HIT] == BALL_SERVICE then
                        if _HITS[_HIT-1] == BALL_NONE then
                            _HIT = _HIT - 1;
                        end
                        break;
                    end
                end
            else/if {strncmp_P(STR, PSTR("+sequencia"), 10) == 0} as bool then
                if _HITS[_HIT] == BALL_MARK then
                    escape false;
                end
                loop do
                    _HIT = _HIT + 1;
                    if _HITS[_HIT]==BALL_MARK or _HITS[_HIT]==BALL_SERVICE then
                        break;
                    end
                end
            else/if {strncmp_P(STR, PSTR("-golpe"), 6) == 0} as bool then
                if _HIT > 0 then
                    _HIT = _HIT - 1;
                    if _HITS[_HIT] == BALL_NONE then
                        _HIT = _HIT - 1;
                    end
                else
                    escape false;
                end
            else/if {strncmp_P(STR, PSTR("+golpe"), 6) == 0} as bool then
                if _HITS[_HIT] != BALL_MARK then
                    _HIT = _HIT + 1;
                    if _HITS[_HIT] == BALL_SERVICE then
                        _HIT = _HIT + 1;    // skip BALL_NONE
                    end
                else
                    escape false;
                end
            else
                escape false;
            end
            escape true;
        end;

        if ok then
            _pserial.println(_F("ok"));
        else
            _pserial.println(_F("invalid command"));
        end
    end
end

loop do
    watching RESTART do
        _pserial.println(_F("= INICIO ="));
        _HIT = 0;

        do
            loop do
                await 2s;
                _TV.tone(3000, 500);
                await 1s;

                var int nxt = do
                    spawn Serial();
                    par do
                        await INT0;
                        escape 1;
                    with
                        await INT1;
                        escape 0;
                    end
                end;

                var u32 t0 = _millis();

                if nxt == (_HIT%2) then
                    _HITS[_HIT] = BALL_NONE;
                    _HIT = _HIT + 1;
                end
                _HITS[_HIT] = BALL_SERVICE;
                _HIT = _HIT + 1;

                _TV.tone(500, 30);
                await 80ms;

                var bool is_back = false;

                _pserial.println(_F("> saque"));
                await 150ms;

                loop do
                    // both are unpresseed?
                    var bool both = (call INT0_Get() == high) and
                                    (call INT1_Get() == high);

                    if nxt == 0 then
                        await INT0;
                    else
                        await INT1;
                    end

                    var u32 t1 = _millis();
                    var int dt = (t1 - t0) as int;
                    t0 = t1;

    // FALL
                    // if both were unpressed and now both are pressed,
                    // and its long since the previous hit, then this is a fall
                    if dt > 1000 then
                        await 100ms;
                        if both and (call INT0_Get() == low) and
                                    (call INT1_Get() == low)
                        then
                            break;
                        end
                    end

                    var u32 kmh = (36 as u32) * _DISTANCE / dt;
                                    // prevents overflow

                    if kmh < 40 then
                        _TV.tone( 500, 30);
                        await 50ms;
                    else/if kmh < 50 then
                        _TV.tone(1500, 30);
                        await 50ms;
                    else/if kmh < 60 then
                        _TV.tone(2500, 30);
                        await 50ms;
                    else/if kmh < 70 then
                        _TV.tone(3500, 30);
                        await 50ms;
                    else
                        _TV.tone(4500, 30);
                        await 50ms;
                    end

                    var bool was_back = is_back;

                    _Hit(_NAMES[1-nxt], kmh, was_back);

                    await 150ms;
                    if nxt == 0 then
                        is_back = (call INT0_Get() == low);
                    else
                        is_back = (call INT1_Get() == low);
                    end
                    if is_back then
                        _TV.tone(200, 30);
                    end

                    if was_back then
                        _HITS[_HIT] = -dt;
                    else
                        _HITS[_HIT] = dt;
                    end
                    _HIT = _HIT + 1;
                    nxt = 1 - nxt;

                    {ALL();}
                    if _GAME.time >= _TIMEOUT then
                        escape;
                    end
                end

                _TV.tone(300, 100);
                await 150ms;
                _TV.tone(200, 100);
                await 150ms;
                _TV.tone(100, 200);
                await 200ms;

                call Score();
            end
        end

        _TV.tone(200, 2000);
        await 2s;

        call Score();
        _pserial.println(_F("= FIM ="));

        loop do
            par/or do
                par/or do
                    await INT0;
                with
                    await INT1;
                end
                await 500ms;
            with
                par/and do
                    await INT0;
                with
                    await INT1;
                end
                break;
            end
        end
    end
end
