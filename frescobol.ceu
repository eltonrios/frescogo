#include "string.ceu"
#include "out.ceu"
#include "wclock.ceu"
#include "int0.ceu"     // UNO=D2, MEGA=D21
#include "int1.ceu"     // UNO=D2, MEGA=D21

output high/low OUT_13;

#define DISTANCE    8
#define TIMEOUT     300000 //10000

_Serial.begin(9600);

#if 0
code/await Name (var&[] byte name) -> none do
    loop do
        var[25] byte str = [];
        await USART_Rx(&str, _);
        name = name .. str;
        if name[$name-1] == {'\n'} then
            break;
        end
    end
end
#endif

loop do

    var[600] u8 hits;
    var[25] byte name0;
    var[25] byte name1;

    var u32 time = 0;
    var int seqs = 0;
    var u32 p0   = 0;
    var u32 p1   = 0;

    code/call Out (none) -> none do
        var u32 total = _min( _min(outer.p0,outer.p1)*1.2, _max(outer.p0,outer.p1) );
        var int pct   = 100 - _min(100, (outer.seqs-1)*3);
        total = total * pct/100;
        _Serial.print(">>> ");
        _Serial.print(outer.time);
        _Serial.print(" ");
        _Serial.print(outer.seqs);
        _Serial.print(" ");
        _Serial.print($outer.hits);
        _Serial.print(" ");
        _Serial.print(outer.p0);
        _Serial.print(" ");
        _Serial.print(outer.p1);
        _Serial.print(" => ");
        _Serial.print(total);
        _Serial.println();
    end

    code/call Dump (none) -> none do
        var int i = -1;
        loop do
            i = i + 1;
            if i == $outer.hits then
                break;
            end
            if outer.hits[i] == 0 then
                _Serial.println("---------");
                i = i + 1;
            end
            if outer.hits[i] == 0 then
                continue;
            end

            if i % 2 == 1 then
                _Serial.print("     ");
            end

            var int v = _map(outer.hits[i], 0,255, 100,2000);
            {{
                char str[5];
                sprintf(str, "%4d", @v);
                Serial.println(str);
            }}
        end
    end

    do
        par/or do
            do await FOREVER; end
            //await Name(&name0);
            //await Name(&name1);
        with
            par/and do
                await INT0;
            with
                await INT1;
            end
            name0 = [] .. "Atleta 1";
            name1 = [] .. "Atleta 2";
        end
    end

    do
        loop do
            seqs = seqs + 1;
            call Out();

            await 1s;
            _tone(8, 5000, 500);
            await 1s;

            var int nxt = do
                par do
                    await INT0;
                    escape 1;
                with
                    await INT1;
                    escape 0;
                end
            end;

            var u32 t0 = _millis();
            hits = hits .. [0];

            if nxt != ($hits%2) then
                hits = hits .. [0];
            end

            _tone(8, 500, 30);
            await 80ms;

            loop do
                par/or do
                    await 3s;
                    await 2s;
                    break;
                with
                    if nxt == 0 then
                        await INT0;
                    else
                        await INT1;
                    end
                    nxt = 1 - nxt;

                    var u32 t1 = _millis();
                    var int dt = (t1 - t0) as int;
                    t0 = t1;

                    hits = hits .. [ _map(dt, 100,2000, 0,255) ];

                    var int kmh = 3600 * DISTANCE / dt;
                    if nxt == 0 then
                        p0 = p0 + (kmh*kmh);    // p0 scores when p1 hits
                    else
                        p1 = p1 + (kmh*kmh);
                    end

                    _Serial.print("> ");
                    _Serial.print(dt);
                    _Serial.print(" ");
                    _Serial.print(kmh);
                    _Serial.print(" ");
                    _Serial.print(p0);
                    _Serial.print(" ");
                    _Serial.print(p1);
                    _Serial.println();

                    if kmh < 50 then
                        _tone(8, 500, 30);
                        await 80ms;
                    else/if kmh < 60 then
                        _tone(8, 500, 30);
                        await 80ms;
                        _tone(8, 500, 30);
                    else/if kmh < 70 then
                        _tone(8, 2000, 30);
                        await 80ms;
                    else/if kmh < 80 then
                        _tone(8, 2000, 30);
                        await 80ms;
                        _tone(8, 2000, 30);
                    else/if kmh < 90 then
                        _tone(8, 4000, 30);
                        await 80ms;
                    else
                        _tone(8, 4000, 30);
                        await 80ms;
                        _tone(8, 4000, 30);
                    end

                    time = time + dt;
                    if time >= TIMEOUT then
                        escape;
                    end
                end
            end

            _tone(8, 300, 100);
            await 150ms;
            _tone(8, 200, 100);
            await 150ms;
            _tone(8, 100, 200);
            await 200ms;
        end
    end

    _tone(8, 200, 2000);
    await 2s;

    call Out();
    call Dump();
end
